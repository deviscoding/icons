@import "strapless/base/scss/base";
@import "root-variables";

// region //////////////////////////////////////////////// Icon Getters

@function icon-feature($f) {
  @return component-feature("icons", $f);
}

@function icon-content( $icon ) {
  $i: quote( $icon );
  @if map-has-key( $icon-characters, $icon ) {
    @return unicode( map-get( $icon-characters, $icon ) );
  }

  @error 'The icon character map does not contain the icon: `#{$icon}`.';
}

// endregion ///////////////////////////////////////////// End Icon Getters

// region //////////////////////////////////////////////// Font Awesome Detection Functions

@function has-font-awesome() {
  @if(variable-exists(fa-font-path)) {
    @if(variable-exists(fa-font-size-base)) {
      @if(variable_exists(fa-line-height-base)) {
        @return true;
      }
    }
  }

  @return false;
}

@function use-font-awesome() {
  @return (icon-feature("font-awesome") and has-font-awesome());
}

// endregion ///////////////////////////////////////////// End Font Awesome Detection Functions

// region //////////////////////////////////////////////// Icon Variable Functions

@function get-icon-prefix() {
  @if variable-exists(icon-css-prefix) {
  //noinspection SassScssResolvedByNameOnly
  @return $icon-css-prefix;
  } @else if use-font-awesome() {
    //noinspection SassScssUnresolvedVariable
    @return $fa-css-prefix;
  } @else {
    @return ico;
  }
}

@function get-icon-font-name() {
  @if variable-exists(icon-font-name) {
    //noinspection SassScssResolvedByNameOnly
    @return $icon-font-name;
  } @else if use-font-awesome() {
  //noinspection SassScssUnresolvedVariable
    @return FontAwesome;
  } @else {
    @return carrot;
  }
}

@function get-icon-font-size() {
  @if variable-exists(icon-font-size) {
    //noinspection SassScssResolvedByNameOnly
    @return $icon-font-size;
  } @else if use-font-awesome() {
    //noinspection SassScssUnresolvedVariable
    @return $fa-font-size-base;
  } @else {
    @return 16px;
  }
}

@function get-icon-line-height() {
  @if variable-exists(icon-line-height) {
    //noinspection SassScssResolvedByNameOnly
    @return $icon-font-size;
  } @else if use-font-awesome() {
    //noinspection SassScssUnresolvedVariable
    @return $fa-font-size-base;
  } @else {
    @return 16px;
  }
}

// endregion ///////////////////////////////////////////// End Icon Variable Functions

// region //////////////////////////////////////////////// SVG Functions

// Encode symbols
@function _url-encode($string) {
  $map: (
    "%": "%25",
    "<": "%3C",
    ">": "%3E",
    " ": "%20",
    "!": "%21",
    "*": "%2A",
    "'": "%27",
    '"': "%22",
    "(": "%28",
    ")": "%29",
    ";": "%3B",
    ":": "%3A",
    "@": "%40",
    "&": "%26",
    "=": "%3D",
    "+": "%2B",
    "$": "%24",
    ",": "%2C",
    "/": "%2F",
    "?": "%3F",
    "#": "%23",
    "[": "%5B",
    "]": "%5D"
  );

  $new: $string;

  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }

  @return $new;
}

// Format the SVG as a URL
@function inline-svg($string) {
  @return url('data:image/svg+xml,#{_url-encode($string)}');
}

@function get-svg-icon($icon-name) {
  // Make sure we aren't already an SVG
  @if quote(str-slice($icon-name, 1, 4)) == "<svg" {
    @return $icon-name;
  }

  @if map-has-key($icons-svg, $icon-name) {
    @return map-get($icons-svg,$icon-name);
  } @else {
    @error "Invalid SVG Icon name `#{$icon-name}` provided.";
  }
}


// endregion ///////////////////////////////////////////// End SVG Functions