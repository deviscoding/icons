@import "icons-variables";

// region //////////////////////////////////////////////// Font Icon Mixins

@mixin icon-font {
  @if icon-feature("font-awesome") and mixin_exists(fa-icon) {
    //noinspection SassScssUnresolvedMixin
    @include fa-icon();
  } @else {
    display: inline-block;
    font: normal normal normal #{$icon-font-size}/#{$icon-line-height} #{$icon-font-name}; // shortening font declaration
    text-rendering: auto; // optimizelegibility throws things off
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
}

@mixin _font-psuedo($location, $icon-content: null, $opacity: 0, $color: null) {
  &::#{$location} {
    @include icon-font;
    @if $icon-content != null {
      content: $icon-content;
    }
    @if $color != null and $opacity != null and $opacity < 1 {
      color: rgba($color,$opacity);
    } @else if $color != null {
      color: $color;
      @if $opacity == 1 {
        opacity: 1;
      }
    } @else if $opacity > 0 {
      opacity: $opacity;
    }
    @content;
  }
}

@mixin font-before($icon-name, $opacity: null, $color: null) {
  @include _font-psuedo(before, $icon-name, $opacity, $color) {
    @content;
  }
}

@mixin font-after($icon-name, $opacity: null, $color: null) {
  @include _font-psuedo(after, $icon-name, $opacity, $color) {
    @content;
  }
}

// endregion ///////////////////////////////////////////// End Font Icon Mixins

// region //////////////////////////////////////////////// SVG Icon Mixins

@mixin _svg-background($svg, $size: $icon-width) {
  $content: unquote($svg);
  background: inline-svg($svg) center center / $size $size no-repeat;
}

@mixin _svg-psuedo($location, $size: $icon-width, $svg: null, $opacity: null, $fill: null) {
  &::#{$location} {
    display: block;
    width: $size;
    height: $size;
    content: " ";
    // Set SVG as Background Image
    @if $svg != null {
      @include _svg-background($svg, $size);
    }
    // Add Fill & Opacity if Needed
    @if $fill != null and $opacity > 0 and $opacity < 1 {
      fill: rgba($fill,$opacity);
    } @else if $fill != null {
      fill: $fill;
      @if $opacity == 1 {
        opacity: 1;
      }
    } @else if $opacity > 0 {
      opacity: $opacity;
    }
    // Any Pass Through Content
    @content;
  }
}

@mixin svg-before($size: $icon-width, $svg-or-name: null, $opacity: null, $fill: null) {
  @include _svg-psuedo(before, $size, get-svg-icon($svg-or-name), $opacity, $fill) {
    @content;
  }
}

@mixin svg-after($size: $icon-width, $svg-or-name: null, $opacity: null, $fill: null) {
  @include _svg-psuedo(after, $size, get-svg-icon($svg-or-name), $opacity, $fill) {
    @content;
  }
}

// endregion ///////////////////////////////////////////// End SVG Icon Mixins

// region //////////////////////////////////////////////// Component Icon Mixins

@mixin button-icons($padding) {
  & + span {
    margin-left: $padding;
  }
}

@mixin card-panel-icons($padding) {
  > .#{$icon-css-prefix} {
    order: -1;
    flex: 0 0 auto;
    margin: 0 $padding 0 0;
  }
}

@mixin card-accordion-indicator($indicator, $size, $right-spacing) {
  .card-accordion > .card .card-title  {
    a[data-toggle="collapse"] {
      @include svg-before($size, $indicator, .3) {
        transform-origin: center center;
        transition-duration: 0.35s;
        right: $right-spacing;
        position: absolute;
      }
    }
    a.collapsed::before {
      transform: rotate(180deg);
    }
  }
}

// endregion ///////////////////////////////////////////// End Component Icon Mixins